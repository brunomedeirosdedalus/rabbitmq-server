load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    "rabbitmq_app",
    "rabbitmq_integration_suite",
)
load(
    ":app.bzl",
    "all_beam_files",
    "all_srcs",
    "all_test_beam_files",
    "test_suite_beam_files",
)

APP_NAME = "rabbitmq_prometheus"

APP_MODULE = "rabbit_prometheus_app"

APP_ENV = """[
	{return_per_object_metrics, false}
]"""

all_beam_files(name = "all_beam_files")

all_test_beam_files(name = "all_test_beam_files")

all_srcs(name = "all_srcs")

test_suite_beam_files(name = "test_suite_beam_files")

# gazelle:erlang_app_dep prometheus
# gazelle:erlang_app_dep rabbit
# gazelle:erlang_app_dep rabbitmq_management_agent
# gazelle:erlang_app_dep rabbitmq_web_dispatch
# gazelle:erlang_app_dep accept

rabbitmq_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    app_env = APP_ENV,
    app_module = APP_MODULE,
    app_name = APP_NAME,
    beam_files = [":beam_files"],
    deps = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbitmq_management_agent:erlang_app",
        "//deps/rabbitmq_web_dispatch:erlang_app",
        "@accept//:erlang_app",
        "@prometheus//:erlang_app",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":deps_plt",
    target = ":erlang_app",
    warnings_as_errors = False,
)

eunit(
    name = "eunit",
    compiled_suites = [],
    eunit_mods = [
        "prometheus_process_collector",
        "prometheus_rabbitmq_alarm_metrics_collector",
        "prometheus_rabbitmq_core_metrics_collector",
        "prometheus_rabbitmq_global_metrics_collector",
        "rabbit_prometheus_app",
        "rabbit_prometheus_dispatcher",
        "rabbit_prometheus_handler",
    ],
    deps = [":test_erlang_app"],
)

broker_for_integration_suites()

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
    size = "small",
)

rabbitmq_integration_suite(
    name = "rabbit_prometheus_http_SUITE",
    size = "medium",
    flaky = True,
)

assert_suites()

alias(
    name = "rabbitmq_prometheus",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)
