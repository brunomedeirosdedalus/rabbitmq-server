load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "BROKER_VERSION_REQUIREMENTS_ANY",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    "rabbitmq_app",
    "rabbitmq_integration_suite",
    "rabbitmq_suite",
)
load(
    ":app.bzl",
    "all_beam_files",
    "all_srcs",
    "all_test_beam_files",
    "test_suite_beam_files",
)

APP_NAME = "rabbitmq_event_exchange"

APP_DESCRIPTION = "Event Exchange Type"

DEPS = [
    "//deps/rabbit_common:erlang_app",
    "//deps/rabbit:erlang_app",
]

all_beam_files(name = "all_beam_files")

all_test_beam_files(name = "all_test_beam_files")

all_srcs(name = "all_srcs")

test_suite_beam_files(name = "test_suite_beam_files")

# gazelle:erlang_app_dep rabbit_common
# gazelle:erlang_app_dep rabbit

rabbitmq_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_hdrs"],
    app_description = APP_DESCRIPTION,
    app_extra_keys = BROKER_VERSION_REQUIREMENTS_ANY,
    app_name = APP_NAME,
    beam_files = [":beam_files"],
    deps = [
        "//deps/rabbit:erlang_app",
        "//deps/rabbit_common:erlang_app",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "base_plt",
    deps = DEPS,
)

dialyze(
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS,
    plt = ":base_plt",
)

eunit(
    name = "eunit",
    compiled_suites = [],
    eunit_mods = [
        "rabbit_event_exchange_decorator",
        "rabbit_exchange_type_event",
    ],
    deps = [":test_erlang_app"],
)

broker_for_integration_suites()

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
)

rabbitmq_integration_suite(
    name = "system_SUITE",
)

rabbitmq_suite(
    name = "unit_SUITE",
    deps = [
        "//deps/rabbitmq_ct_helpers:erlang_app",
    ],
)

assert_suites()

alias(
    name = "rabbitmq_event_exchange",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)
