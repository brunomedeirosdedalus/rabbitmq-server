load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "assert_suites",
    "rabbitmq_app",
    "rabbitmq_suite",
)
load(
    ":app.bzl",
    "all_beam_files",
    "all_srcs",
    "all_test_beam_files",
)

py_binary(
    name = "codegen",
    srcs = [
        "codegen.py",
    ],
    imports = ["../../deps/rabbitmq_codegen"],
    deps = [
        "//deps/rabbitmq_codegen:amqp_codegen",
    ],
)

genrule(
    name = "generated_headers",
    srcs = [
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.9.1.json",
        "//deps/rabbitmq_codegen:credit_extension.json",
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.8.json",
    ],
    outs = ["include/rabbit_framing.hrl"],
    cmd = "$(location :codegen) --ignore-conflicts header $(SRCS) $@",
    tools = [":codegen"],
)

genrule(
    name = "rabbit_framing_amqp_0_9_1.erl",
    srcs = [
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.9.1.json",
        "//deps/rabbitmq_codegen:credit_extension.json",
    ],
    outs = ["src/rabbit_framing_amqp_0_9_1.erl"],
    cmd = "$(location :codegen) body $(SRCS) $@",
    tools = [":codegen"],
)

genrule(
    name = "rabbit_framing_amqp_0_8.erl",
    srcs = [
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.8.json",
    ],
    outs = ["src/rabbit_framing_amqp_0_8.erl"],
    cmd = "$(location :codegen) body $(SRCS) $@",
    tools = [":codegen"],
)

APP_EXTRA_KEYS = """
%% Hex.pm package informations.
	{licenses, ["MPL-2.0"]},
	{links, [
	    {"Website", "https://www.rabbitmq.com/"},
	    {"GitHub", "https://github.com/rabbitmq/rabbitmq-common"}
	  ]},
	{build_tools, ["make", "rebar3"]},
	{files, [
	    "erlang.mk",
	    "git-revisions.txt",
	    "include",
	    "LICENSE*",
	    "Makefile",
	    "rabbitmq-components.mk",
	    "README",
	    "README.md",
	    "mk"
	  ]}
"""

EXTRA_APPS = [
    "compiler",
    "crypto",
    "public_key",
    "sasl",
    "ssl",
    "syntax_tools",
    "tools",
    "xmerl",
]

all_beam_files()

all_test_beam_files()

all_srcs()

rabbitmq_app(
    app_description = "Modules shared by rabbitmq-server and rabbitmq-erlang-client",
    app_extra_keys = APP_EXTRA_KEYS,
    app_name = "rabbit_common",
    extra_apps = EXTRA_APPS,
    public_hdrs = glob(
        ["include/*.hrl"],
        exclude = ["include/rabbit_framing.hrl"],
    ) + [
        "include/rabbit_framing.hrl",
    ],
    deps = [
        "@credentials_obfuscation//:erlang_app",
        "@recon//:erlang_app",
        "@thoas//:erlang_app",
    ],
)

xref(
    additional_libs = [
        "@ranch//:erlang_app",
    ],
)

plt(
    name = "base_plt",
    apps = [
        "mnesia",
        "crypto",
        "ssl",
    ] + EXTRA_APPS,
    plt = "//:base_plt",
)

dialyze(
    plt = ":base_plt",
)

rabbitmq_suite(
    name = "rabbit_env_SUITE",
    size = "small",
    deps = [
        "@proper//:erlang_app",
    ],
)

rabbitmq_suite(
    name = "supervisor2_SUITE",
    size = "small",
    additional_srcs = [
        "test/test_event_handler.erl",
    ],
)

rabbitmq_suite(
    name = "unit_priority_queue_SUITE",
    size = "small",
)

rabbitmq_suite(
    name = "unit_SUITE",
    size = "medium",
    additional_srcs = [
        "test/gen_server2_test_server.erl",
    ],
    deps = [
        "@credentials_obfuscation//:erlang_app",
        "@proper//:erlang_app",
    ],
)

rabbitmq_suite(
    name = "worker_pool_SUITE",
    size = "small",
)

assert_suites()

alias(
    name = "rabbit_common",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)
