load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "assert_suites",
    "rabbitmq_app",
    "rabbitmq_suite",
)
load(
    ":app.bzl",
    "all_beam_files",
    "all_srcs",
    "all_test_beam_files",
    "test_suite_beam_files",
)

py_binary(
    name = "codegen",
    srcs = [
        "codegen.py",
    ],
    imports = ["../../deps/rabbitmq_codegen"],
    deps = [
        "//deps/rabbitmq_codegen:amqp_codegen",
    ],
)

genrule(
    name = "generated_headers",
    srcs = [
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.9.1.json",
        "//deps/rabbitmq_codegen:credit_extension.json",
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.8.json",
    ],
    outs = ["include/rabbit_framing.hrl"],
    cmd = "$(location :codegen) --ignore-conflicts header $(SRCS) $@",
    tools = [":codegen"],
)

genrule(
    name = "rabbit_framing_amqp_0_9_1.erl",
    srcs = [
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.9.1.json",
        "//deps/rabbitmq_codegen:credit_extension.json",
    ],
    outs = ["src/rabbit_framing_amqp_0_9_1.erl"],
    cmd = "$(location :codegen) body $(SRCS) $@",
    tools = [":codegen"],
)

genrule(
    name = "rabbit_framing_amqp_0_8.erl",
    srcs = [
        "//deps/rabbitmq_codegen:amqp-rabbitmq-0.8.json",
    ],
    outs = ["src/rabbit_framing_amqp_0_8.erl"],
    cmd = "$(location :codegen) body $(SRCS) $@",
    tools = [":codegen"],
)

APP_EXTRA_KEYS = """
%% Hex.pm package informations.
	{licenses, ["MPL-2.0"]},
	{links, [
	    {"Website", "https://www.rabbitmq.com/"},
	    {"GitHub", "https://github.com/rabbitmq/rabbitmq-common"}
	  ]},
	{build_tools, ["make", "rebar3"]},
	{files, [
	    "erlang.mk",
	    "git-revisions.txt",
	    "include",
	    "LICENSE*",
	    "Makefile",
	    "rabbitmq-components.mk",
	    "README",
	    "README.md",
	    "mk"
	  ]}
"""

# gazelle:erlang_app_extra_app compiler
# gazelle:erlang_app_extra_app crypto
# gazelle:erlang_app_extra_app public_key
# gazelle:erlang_app_extra_app sasl
# gazelle:erlang_app_extra_app ssl
# gazelle:erlang_app_extra_app syntax_tools
# gazelle:erlang_app_extra_app tools
# gazelle:erlang_app_extra_app xmerl

# gazelle:erlang_app_dep credentials_obfuscation
# gazelle:erlang_app_dep recon
# gazelle:erlang_app_dep thoas

all_beam_files(name = "all_beam_files")

all_test_beam_files(name = "all_test_beam_files")

all_srcs(name = "all_srcs")

test_suite_beam_files(name = "test_suite_beam_files")

rabbitmq_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_hdrs"],
    app_description = "Modules shared by rabbitmq-server and rabbitmq-erlang-client",
    app_extra_keys = APP_EXTRA_KEYS,
    app_name = "rabbit_common",
    beam_files = [":beam_files"],
    extra_apps = [
        "compiler",
        "crypto",
        "public_key",
        "sasl",
        "ssl",
        "syntax_tools",
        "tools",
        "xmerl",
    ],
    deps = [
        "@credentials_obfuscation//:erlang_app",
        "@recon//:erlang_app",
        "@thoas//:erlang_app",
    ],
)

xref(
    name = "xref",
    additional_libs = [
        "@ranch//:erlang_app",  #keep
    ],
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    plt = ":deps_plt",
    target = ":erlang_app",
)

rabbitmq_suite(
    name = "rabbit_env_SUITE",
    size = "small",
    deps = [
        "@proper//:erlang_app",
    ],
)

rabbitmq_suite(
    name = "supervisor2_SUITE",
    size = "small",
    additional_beam = [
        "test/test_event_handler.beam",
    ],
)

rabbitmq_suite(
    name = "unit_priority_queue_SUITE",
    size = "small",
)

rabbitmq_suite(
    name = "unit_SUITE",
    size = "medium",
    additional_beam = [
        "test/gen_server2_test_server.beam",
    ],
    deps = [
        "@credentials_obfuscation//:erlang_app",
        "@proper//:erlang_app",
    ],
)

rabbitmq_suite(
    name = "worker_pool_SUITE",
    size = "small",
)

assert_suites()

alias(
    name = "rabbit_common",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)

eunit(
    name = "eunit",
    compiled_suites = [
        ":test_gen_server2_test_server_beam",
        ":test_test_event_handler_beam",
    ],
    eunit_mods = [
        "app_utils",
        "code_version",
        "credit_flow",
        "delegate",
        "delegate_sup",
        "file_handle_cache",
        "file_handle_cache_stats",
        "gen_server2",
        "gen_server2_test_server",
        "mirrored_supervisor_locks",
        "mnesia_sync",
        "pmon",
        "priority_queue",
        "rabbit_amqp_connection",
        "rabbit_amqqueue_common",
        "rabbit_auth_backend_dummy",
        "rabbit_auth_mechanism",
        "rabbit_authn_backend",
        "rabbit_authz_backend",
        "rabbit_basic_common",
        "rabbit_binary_generator",
        "rabbit_binary_parser",
        "rabbit_cert_info",
        "rabbit_channel_common",
        "rabbit_command_assembler",
        "rabbit_control_misc",
        "rabbit_core_metrics",
        "rabbit_data_coercion",
        "rabbit_date_time",
        "rabbit_env",
        "rabbit_error_logger_handler",
        "rabbit_event",
        "rabbit_exchange_type",
        "rabbit_framing_amqp_0_8",
        "rabbit_framing_amqp_0_9_1",
        "rabbit_heartbeat",
        "rabbit_http_util",
        "rabbit_json",
        "rabbit_log",
        "rabbit_misc",
        "rabbit_msg_store_index",
        "rabbit_net",
        "rabbit_nodes_common",
        "rabbit_numerical",
        "rabbit_password_hashing",
        "rabbit_pbe",
        "rabbit_peer_discovery_backend",
        "rabbit_policy_validator",
        "rabbit_queue_collector",
        "rabbit_registry",
        "rabbit_registry_class",
        "rabbit_resource_monitor_misc",
        "rabbit_runtime",
        "rabbit_runtime_parameter",
        "rabbit_semver",
        "rabbit_semver_parser",
        "rabbit_ssl_options",
        "rabbit_types",
        "rabbit_writer",
        "supervisor2",
        "test_event_handler",
        "vm_memory_monitor",
        "worker_pool",
        "worker_pool_sup",
        "worker_pool_worker",
    ],
    deps = [":test_erlang_app"],
)
