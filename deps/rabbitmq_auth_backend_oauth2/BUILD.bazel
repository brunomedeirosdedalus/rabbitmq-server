load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load(
    "//:rabbitmq.bzl",
    "RABBITMQ_DIALYZER_OPTS",
    "assert_suites",
    "broker_for_integration_suites",
    "rabbitmq_app",
    "rabbitmq_integration_suite",
    "rabbitmq_suite",
    "without",
)
load(
    ":app.bzl",
    "all_beam_files",
    "all_srcs",
    "all_test_beam_files",
    "test_suite_beam_files",
)

APP_NAME = "rabbitmq_auth_backend_oauth2"

APP_DESCRIPTION = "OAuth 2 and JWT-based AuthN and AuthZ backend"

BUILD_DEPS = [
    "//deps/rabbit_common:erlang_app",
    "//deps/rabbitmq_cli:rabbitmqctl",
]

DEPS = [
    "@jose//:erlang_app",
]

all_beam_files(name = "all_beam_files")

all_test_beam_files(name = "all_test_beam_files")

all_srcs(name = "all_srcs")

test_suite_beam_files(name = "test_suite_beam_files")

# gazelle:erlang_app_dep jose
# gazelle:erlang_app_dep rabbit
# gazelle:erlang_app_dep base64url
# gazelle:erlang_app_dep cowlib

rabbitmq_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    app_description = APP_DESCRIPTION,
    app_name = APP_NAME,
    beam_files = [":beam_files"],
    deps = [
        "//deps/rabbit:erlang_app",
        "@base64url//:erlang_app",
        "@cowlib//:erlang_app",
        "@jose//:erlang_app",
    ],
)

xref(
    additional_libs = [
        "//deps/rabbitmq_cli:rabbitmqctl",
    ],
)

plt(
    name = "base_plt",
    deps = without(
        "//deps/rabbitmq_cli:rabbitmqctl",
        BUILD_DEPS + DEPS,
    ),
)

dialyze(
    dialyzer_opts = RABBITMQ_DIALYZER_OPTS + ["-Wno_undefined_callbacks"],
    plt = ":base_plt",
    warnings_as_errors = False,
)

broker_for_integration_suites()

rabbitmq_integration_suite(
    name = "add_uaa_key_command_SUITE",
    size = "small",
)

rabbitmq_integration_suite(
    name = "config_schema_SUITE",
)

rabbitmq_integration_suite(
    name = "jwks_SUITE",
    additional_beam = [
        "test/rabbit_auth_backend_oauth2_test_util.beam",
        "test/jwks_http_app.beam",
        "test/jwks_http_handler.beam",
        "test/jwks_http_sup.beam",
    ],
    deps = [
        "@cowboy//:erlang_app",
    ],
)

rabbitmq_suite(
    name = "scope_SUITE",
    size = "medium",
    deps = [
        "//deps/rabbit_common:erlang_app",
    ],
)

rabbitmq_integration_suite(
    name = "system_SUITE",
    size = "medium",
    additional_beam = [
        "test/rabbit_auth_backend_oauth2_test_util.beam",
    ],
)

rabbitmq_integration_suite(
    name = "unit_SUITE",
    size = "medium",
    additional_beam = [
        "test/rabbit_auth_backend_oauth2_test_util.beam",
    ],
)

rabbitmq_suite(
    name = "wildcard_match_SUITE",
    size = "small",
)

assert_suites()

alias(
    name = "rabbitmq_auth_backend_oauth2",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)

eunit(
    name = "eunit",
    compiled_suites = [
        ":test_jwks_http_app_beam",
        ":test_jwks_http_handler_beam",
        ":test_jwks_http_sup_beam",
        ":test_rabbit_auth_backend_oauth2_test_util_beam",
    ],
    eunit_mods = [
        "Elixir.RabbitMQ.CLI.Ctl.Commands.AddUaaKeyCommand",
        "jwks_http_app",
        "jwks_http_handler",
        "jwks_http_sup",
        "rabbit_auth_backend_oauth2",
        "rabbit_auth_backend_oauth2_app",
        "rabbit_auth_backend_oauth2_test_util",
        "rabbit_oauth2_scope",
        "uaa_jwks",
        "uaa_jwt",
        "uaa_jwt_jwk",
        "uaa_jwt_jwt",
        "wildcard",
    ],
    deps = [":test_erlang_app"],
)
