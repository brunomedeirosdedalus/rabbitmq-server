load("@rules_erlang//:erlang_bytecode2.bzl", "erlang_bytecode", "erlc_opts")
load("@rules_erlang//:erlang_app.bzl", "erlang_app")

erlc_opts(
    name = "erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+warn_unused_vars",
            "+warn_export_all",
            "+warn_shadow_vars",
            "+warn_unused_import",
            "+warn_unused_function",
            "+warn_bif_clash",
            "+warn_unused_record",
            "+warn_deprecated_function",
            "+warn_obsolete_guard",
            "+strict_validation",
            "+warn_export_vars",
            "+warn_exported_vars",
            "+warn_missing_spec",
            "+warn_untyped_record",
            "+debug_info",
            "+{platform_define,\"^2\",unicode_str}",
        ],
        "//conditions:default": [
            "+warn_unused_vars",
            "+warn_export_all",
            "+warn_shadow_vars",
            "+warn_unused_import",
            "+warn_unused_function",
            "+warn_bif_clash",
            "+warn_unused_record",
            "+warn_deprecated_function",
            "+warn_obsolete_guard",
            "+strict_validation",
            "+warn_export_vars",
            "+warn_exported_vars",
            "+warn_missing_spec",
            "+warn_untyped_record",
            "+debug_info",
            "+{platform_define,\"^2\",unicode_str}",
            "+deterministic",
        ],
    }),
    visibility = [":__subpackages__"],
)

erlang_bytecode(
    name = "ebin_getopt_beam",
    srcs = ["src/getopt.erl"],
    outs = ["ebin/getopt.beam"],
    app_name = "getopt",
    erlc_opts = "//:erlc_opts",
)

filegroup(
    name = "beam_files",
    srcs = ["ebin/getopt.beam"],
)

filegroup(
    name = "srcs",
    srcs = [
        "src/getopt.app.src",
        "src/getopt.erl",
    ],
)

filegroup(
    name = "private_hdrs",
    srcs = [],
)

filegroup(
    name = "public_hdrs",
    srcs = [],
)

filegroup(
    name = "priv",
    srcs = [],
)

filegroup(
    name = "licenses",
    srcs = ["LICENSE.txt"],
)

filegroup(
    name = "public_and_private_hdrs",
    srcs = [
        ":private_hdrs",
        ":public_hdrs",
    ],
)

filegroup(
    name = "all_srcs",
    srcs = [
        ":public_and_private_hdrs",
        ":srcs",
    ],
)

erlang_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    app_name = "getopt",
    beam_files = [":beam_files"],
)

alias(
    name = "getopt",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)
